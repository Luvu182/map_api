import React, { useState, useEffect, useRef, useMemo } from 'react';
import { fetchStatesSummary, fetchCrawlStatus, crawlSingleRoad, searchRoads, fetchRoadsByCity } from '../api/crawler';
import { getStateName } from '../data/stateNames';
import { useLanguage } from '../contexts/LanguageContext';
import { t } from '../translations/translations';
import { getRoadTypeLabel } from '../utils/roadTypeTranslations';
import BusinessPotentialCard from './BusinessPotentialCard';
import CitySelector from './CitySelector';

const CrawlControl = ({ onCrawlStart }) => {
  const { language } = useLanguage();
  const [selectedState, setSelectedState] = useState('');
  const [selectedCity, setSelectedCity] = useState(null);
  const [selectedRoadTypes, setSelectedRoadTypes] = useState(new Set(['primary', 'secondary', 'tertiary', 'residential', 'living_street', 'unclassified'])); // Default to all main road types
  const [businessKeyword, setBusinessKeyword] = useState('');
  const [roadNameFilter, setRoadNameFilter] = useState('');
  const [minRoadLength, setMinRoadLength] = useState(0); // Minimum road length in km
  const [businessDensity, setBusinessDensity] = useState('all'); // all, high, medium
  const [isLoading, setIsLoading] = useState(false);
  const [allRoads, setAllRoads] = useState([]);
  const [message, setMessage] = useState('');
  const [currentPage, setCurrentPage] = useState(1);
  const [crawlStatus, setCrawlStatus] = useState({});
  const [showOnlyUncrawled, setShowOnlyUncrawled] = useState(true); // Default to show only uncrawled
  const [crawlingRoads, setCrawlingRoads] = useState(new Set());
  const [crawlingSessions, setCrawlingSessions] = useState({}); // Track active crawls with session info
  const [sortBy, setSortBy] = useState('poi'); // poi, potential, name, length, type
  const [hasSearched, setHasSearched] = useState(false); // Track if user has searched
  const [selectedRoadForAnalysis, setSelectedRoadForAnalysis] = useState(null); // For showing business potential
  const [isBulkMode, setIsBulkMode] = useState(false); // Toggle between single and bulk mode
  const [selectedRoads, setSelectedRoads] = useState(new Set()); // Selected roads for bulk crawl
  const [bulkCrawlProgress, setBulkCrawlProgress] = useState(null); // Track bulk crawl progress
  const roadsPerPage = 50;

  // All 50 states from database
  const states = [
    { code: 'AL', name: 'Alabama' },
    { code: 'AK', name: 'Alaska' },
    { code: 'AZ', name: 'Arizona' },
    { code: 'AR', name: 'Arkansas' },
    { code: 'CA', name: 'California' },
    { code: 'CO', name: 'Colorado' },
    { code: 'CT', name: 'Connecticut' },
    { code: 'DC', name: 'District of Columbia' },
    { code: 'FL', name: 'Florida' },
    { code: 'GA', name: 'Georgia' },
    { code: 'HI', name: 'Hawaii' },
    { code: 'ID', name: 'Idaho' },
    { code: 'IL', name: 'Illinois' },
    { code: 'IN', name: 'Indiana' },
    { code: 'IA', name: 'Iowa' },
    { code: 'KS', name: 'Kansas' },
    { code: 'KY', name: 'Kentucky' },
    { code: 'LA', name: 'Louisiana' },
    { code: 'ME', name: 'Maine' },
    { code: 'MD', name: 'Maryland' },
    { code: 'MA', name: 'Massachusetts' },
    { code: 'MI', name: 'Michigan' },
    { code: 'MN', name: 'Minnesota' },
    { code: 'MS', name: 'Mississippi' },
    { code: 'MO', name: 'Missouri' },
    { code: 'MT', name: 'Montana' },
    { code: 'NE', name: 'Nebraska' },
    { code: 'NV', name: 'Nevada' },
    { code: 'NH', name: 'New Hampshire' },
    { code: 'NJ', name: 'New Jersey' },
    { code: 'NM', name: 'New Mexico' },
    { code: 'NY', name: 'New York' },
    { code: 'NC', name: 'North Carolina' },
    { code: 'ND', name: 'North Dakota' },
    { code: 'OH', name: 'Ohio' },
    { code: 'OK', name: 'Oklahoma' },
    { code: 'OR', name: 'Oregon' },
    { code: 'PA', name: 'Pennsylvania' },
    { code: 'RI', name: 'Rhode Island' },
    { code: 'SC', name: 'South Carolina' },
    { code: 'SD', name: 'South Dakota' },
    { code: 'TN', name: 'Tennessee' },
    { code: 'TX', name: 'Texas' },
    { code: 'UT', name: 'Utah' },
    { code: 'VA', name: 'Virginia' },
    { code: 'WA', name: 'Washington' },
    { code: 'WV', name: 'West Virginia' },
    { code: 'WI', name: 'Wisconsin' },
    { code: 'WY', name: 'Wyoming' }
  ];

  // Road type categories for OSM data - ordered by business potential
  const roadCategories = {
    local: {
      label: t('localBusinessStreets', language),
      types: ['tertiary', 'residential', 'living_street'],
      description: t('localBusinessDesc', language),
      businessPotential: 'very-high'
    },
    major: {
      label: t('majorCommercialRoads', language),
      types: ['primary', 'secondary'],
      description: t('majorCommercialDesc', language),
      businessPotential: 'high'
    },
    highways: {
      label: t('highwaysInterstates', language),
      types: ['motorway', 'trunk'],
      description: t('highwaysDesc', language),
      businessPotential: 'medium'
    },
    service: {
      label: t('serviceAccessRoads', language),
      types: ['service', 'unclassified'],
      description: t('serviceDesc', language),
      businessPotential: 'low'
    },
    pedestrian: {
      label: language === 'vi' ? 'Đường đi bộ/Xe đạp' : 'Pedestrian/Cycle Paths',
      types: ['footway', 'cycleway', 'path', 'pedestrian'],
      description: language === 'vi' ? 'Đường cho người đi bộ, xe đạp' : 'Paths for pedestrians and cyclists',
      businessPotential: 'very-low'
    },
    other: {
      label: language === 'vi' ? 'Loại đường khác' : 'Other Road Types',
      types: ['track', 'bridleway', 'steps', 'corridor'],
      description: language === 'vi' ? 'Đường mòn, cầu thang...' : 'Tracks, steps, etc.',
      businessPotential: 'very-low'
    }
  };

  // Popular business keywords
  const popularKeywords = [
    'restaurant', 'clothing store', 'grocery store', 'coffee shop',
    'pharmacy', 'gas station', 'hotel', 'bank', 'salon', 'gym'
  ];

  useEffect(() => {
    loadStatesSummary();
  }, []);

  // Reset search results when key filters change
  useEffect(() => {
    setHasSearched(false);
    // Don't clear roads here - let user manually search
    // setAllRoads([]);
  }, [selectedState, selectedCity, businessKeyword]);

  // Use refs to track and control requests
  const abortControllerRef = useRef(null);
  const lastRequestTimeRef = useRef(0);
  
  // No auto-search - user must click Search button

  // Toggle road type selection
  const toggleRoadType = (types) => {
    const newSelectedTypes = new Set(selectedRoadTypes);
    types.forEach(type => {
      if (newSelectedTypes.has(type)) {
        newSelectedTypes.delete(type);
      } else {
        newSelectedTypes.add(type);
      }
    });
    setSelectedRoadTypes(newSelectedTypes);
  };

  const loadRoads = async () => {
    try {
      setIsLoading(true);
      
      // If city is selected, use city-based API
      if (selectedCity) {
        const data = await fetchRoadsByCity(selectedCity.city_name, selectedCity.state_code, 2000);
        setAllRoads(data.roads || []);
      } else if (roadNameFilter) {
        // Use search API if road name filter is provided
        const searchResults = await searchRoads(roadNameFilter, selectedState, null, 200);
        setAllRoads(searchResults.results || []);
      } else {
        // Must have city selected
        setAllRoads([]);
        setMessage('Please select a city to search for roads');
        return;
      }
      
      // Don't fetch crawl status on search - only when explicitly needed
      // Crawl status will be checked when user clicks crawl button
    } catch (error) {
      console.error('Failed to load roads:', error);
      setMessage('Error loading roads: ' + error.message);
      setAllRoads([]); // Clear roads on error
    } finally {
      setIsLoading(false);
    }
  };


  const loadStatesSummary = async () => {
    try {
      const data = await fetchStatesSummary();
      // Could enhance state list with actual road counts
    } catch (error) {
      console.error('Failed to load states summary:', error);
    }
  };

  const handleSearch = async () => {
    setCurrentPage(1);
    setHasSearched(true);
    await loadRoads();
  };

  const handleCrawlSingleRoad = async (road) => {
    const roadId = road.osm_id;
    const crawlKey = `${roadId}_${businessKeyword || 'all'}`;
    
    setCrawlingRoads(prev => new Set([...prev, roadId]));
    setCrawlingSessions(prev => ({
      ...prev,
      [crawlKey]: { status: 'crawling', startTime: Date.now() }
    }));
    
    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`http://localhost:8000/crawl/road/${roadId}?keyword=${businessKeyword || 'all'}`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      if (!response.ok) throw new Error('Crawl failed');
      
      const result = await response.json();
      
      // Update with completed status
      setCrawlingSessions(prev => ({
        ...prev,
        [crawlKey]: {
          status: 'completed',
          sessionId: result.session_id,
          businessesFound: result.businesses_found,
          startTime: prev[crawlKey]?.startTime
        }
      }));
      
      const newStatus = { ...crawlStatus };
      newStatus[roadId] = { [businessKeyword]: 'completed' };
      setCrawlStatus(newStatus);
      
      setMessage(`${t('crawlCompleted', language)}: ${road.name} - ${result.businesses_found} businesses found`);
      
    } catch (error) {
      setCrawlingSessions(prev => ({
        ...prev,
        [crawlKey]: { status: 'failed', error: error.message }
      }));
      
      const newStatus = { ...crawlStatus };
      newStatus[roadId] = { [businessKeyword]: 'failed' };
      setCrawlStatus(newStatus);
      
      setMessage(`Error crawling ${road.name}: ${error.message}`);
    } finally {
      setCrawlingRoads(prev => {
        const newSet = new Set(prev);
        newSet.delete(roadId);
        return newSet;
      });
    }
  };

  const handleViewResults = (sessionId) => {
    // Navigate to session view page
    if (sessionId) {
      window.open(`/session/${sessionId}`, '_blank');
    } else {
      console.error('No session ID provided');
    }
  };

  const handleBulkCrawl = async () => {
    const roadsToProcess = allRoads.filter(road => selectedRoads.has(road.osm_id));
    if (roadsToProcess.length === 0) return;
    
    const startTime = Date.now();
    setBulkCrawlProgress({ current: 0, total: roadsToProcess.length, startTime });
    
    for (let i = 0; i < roadsToProcess.length; i++) {
      const road = roadsToProcess[i];
      const timeElapsed = Date.now() - startTime;
      const avgTimePerRoad = i > 0 ? timeElapsed / i : 10000; // Estimate 10s for first road
      const remainingRoads = roadsToProcess.length - i - 1;
      const estimatedTimeRemaining = remainingRoads * avgTimePerRoad;
      
      setBulkCrawlProgress({ 
        current: i + 1, 
        total: roadsToProcess.length,
        startTime,
        estimatedTimeRemaining,
        currentRoad: road.name || 'Unnamed road'
      });
      
      try {
        await handleCrawlSingleRoad(road);
        
        // Wait 10 seconds between API calls to avoid quota issues
        if (i < roadsToProcess.length - 1) {
          // Show countdown during wait
          for (let countdown = 10; countdown > 0; countdown--) {
            setBulkCrawlProgress(prev => ({ ...prev, waitingTime: countdown }));
            await new Promise(resolve => setTimeout(resolve, 1000));
          }
          setBulkCrawlProgress(prev => ({ ...prev, waitingTime: null }));
        }
      } catch (error) {
        console.error(`Failed to crawl road ${road.name}:`, error);
      }
    }
    
    setBulkCrawlProgress(null);
    setSelectedRoads(new Set());
    setMessage(`${language === 'vi' ? 'Hoàn thành crawl' : 'Bulk crawl completed'}: ${roadsToProcess.length} ${language === 'vi' ? 'đường' : 'roads'}`);
  };

  // Get business potential score from database or calculate
  const getBusinessPotential = (road) => {
    // Use score from database if available (0-100 scale)
    if (road.business_potential_score !== undefined) {
      // Convert 0-100 to 0-6 scale for existing UI
      return Math.round(road.business_potential_score / 100 * 6);
    }
    
    // Fallback calculation if no score from database
    let score = 0;
    const roadName = (road.name || '').toLowerCase();
    
    // Road type score - adjusted for reality
    if (['primary', 'secondary'].includes(road.highway)) {
      score += 3; // Major arterials usually have businesses
    } else if (['tertiary', 'residential'].includes(road.highway)) {
      score += 2; // Mixed potential
    } else if (['living_street'].includes(road.highway)) {
      score += 1; // Some local businesses possible
    } else if (['motorway', 'trunk', 'service'].includes(road.highway)) {
      score += 0; // Highways and service roads rarely have businesses
    }
    
    // Length score - shorter urban roads often have more businesses
    const length = road.total_length_km || road.length_km || 0;
    if (length >= 0.5 && length <= 3) {
      score += 2; // Optimal for business districts
    } else if (length > 3 && length <= 10) {
      score += 1; // Still reasonable
    }
    // Very short (<0.5km) or very long (>10km) roads get 0 points
    
    // Name score - be more strict about business indicators
    if (road.name) {
      // High business potential names (exact words, not partial matches)
      const highPotentialWords = ['main', 'broadway', 'market', 'commercial', 'downtown', 'center', 'plaza', 'business'];
      const words = roadName.split(/\s+/);
      if (words.some(word => highPotentialWords.includes(word))) {
        score += 2;
      }
      
      // Negative indicators - reduce score for non-business areas
      const nonBusinessIndicators = ['artillery', 'military', 'industrial', 'airport', 'cemetery', 
                                     'hospital', 'school', 'park', 'trail', 'path', 'creek'];
      if (nonBusinessIndicators.some(indicator => roadName.includes(indicator))) {
        score = Math.max(0, score - 2); // Reduce score but don't go negative
      }
    }
    
    // Cap score at reasonable levels
    return Math.min(score, 6); // Max 6 instead of 7
  };

  // Use memo to prevent unnecessary recalculations
  const filteredAndSortedRoads = useMemo(() => {
    
    // Filter roads based on criteria
    const filtered = allRoads.filter(road => {
      // Filter by road types (client-side because API doesn't support this yet)
      if (selectedRoadTypes.size > 0 && !selectedRoadTypes.has(road.highway)) {
        return false;
      }
      
      // Filter by minimum length (client-side)
      const roadLength = road.total_length_km || road.length_km || 0;
      if (minRoadLength > 0 && roadLength < minRoadLength) {
        return false;
      }
      
      // Filter by business density (client-side)
      if (businessDensity !== 'all') {
        const potential = getBusinessPotential(road);
        if (businessDensity === 'high' && potential < 4) return false;
        if (businessDensity === 'medium' && (potential < 2 || potential > 4)) return false;
      }
      
      // Filter by crawl status
      const currentKeyword = businessKeyword || 'all';
      const dbCrawlInfo = road.last_crawl_info;
      const keywordsCrawled = dbCrawlInfo?.keywords_crawled || [];
      const keywordAlreadyCrawled = keywordsCrawled.includes(currentKeyword);
      const roadStatus = crawlStatus[road.osm_id]?.[currentKeyword];
      
      if (showOnlyUncrawled && (keywordAlreadyCrawled || (roadStatus && roadStatus !== 'failed'))) {
        return false;
      }
      
      return true;
    });

    // Sort roads based on selected criteria
    const sorted = [...filtered].sort((a, b) => {
      switch (sortBy) {
        case 'poi':
          // Sort by POI count first (descending), then by potential
          const poiDiff = (b.poi_count || 0) - (a.poi_count || 0);
          if (poiDiff !== 0) return poiDiff;
          // If POI counts are equal, sort by potential
          return getBusinessPotential(b) - getBusinessPotential(a);
        case 'potential':
          return getBusinessPotential(b) - getBusinessPotential(a);
        case 'name':
          return (a.name || '').localeCompare(b.name || '');
        case 'length':
          return (b.total_length_km || b.length_km || 0) - (a.total_length_km || a.length_km || 0);
        case 'type':
          return (a.highway || '').localeCompare(b.highway || '');
        default:
          // Default: sort by POI first, then potential
          const defaultPoiDiff = (b.poi_count || 0) - (a.poi_count || 0);
          if (defaultPoiDiff !== 0) return defaultPoiDiff;
          return getBusinessPotential(b) - getBusinessPotential(a);
      }
    });
    
    return sorted;
  }, [allRoads, selectedRoadTypes, minRoadLength, businessDensity, crawlStatus, businessKeyword, showOnlyUncrawled, sortBy]);

  // Pagination
  const totalPages = Math.ceil(filteredAndSortedRoads.length / roadsPerPage);
  const paginatedRoads = filteredAndSortedRoads.slice(
    (currentPage - 1) * roadsPerPage,
    currentPage * roadsPerPage
  );

  // Function to get center point of road
  const getRoadCenterPoint = (road) => {
    // Use actual coordinates from database if available
    if (road.center_lat && road.center_lon) {
      return {
        lat: road.center_lat,
        lon: road.center_lon
      };
    }
    // Fallback to default if no coordinates
    return null;
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="bg-white p-6 rounded-lg shadow">
        <h2 className="text-2xl font-bold mb-2">{t('crawlControl', language)}</h2>
        <p className="text-gray-600">
          {t('findBusinesses', language)}
        </p>
      </div>

      {/* Quick Start Guide */}
      <div className="bg-blue-50 border-l-4 border-blue-400 p-4">
        <div className="flex">
          <div className="ml-3">
            <h3 className="text-sm font-medium text-blue-800">{t('quickTips', language)}</h3>
            <div className="mt-2 text-sm text-blue-700">
              <ul className="list-disc list-inside space-y-1">
                {t('quickTipsList', language).map((tip, index) => (
                  <li key={index}>{tip}</li>
                ))}
              </ul>
            </div>
          </div>
        </div>
      </div>

      {/* Main Search Section */}
      <div className="bg-white p-6 rounded-lg shadow">
        <h3 className="text-lg font-semibold mb-4">{t('searchConfiguration', language)}</h3>
        
        {/* Business Keyword - Most Important */}
        <div className="mb-6 p-4 bg-yellow-50 rounded-lg border border-yellow-200">
          <label className="block text-sm font-medium text-gray-700 mb-2">
            1. {t('businessTypeQuestion', language)} <span className="text-red-500">*</span>
          </label>
          <div className="flex gap-2 mb-3">
            <input
              type="text"
              value={businessKeyword}
              onChange={(e) => setBusinessKeyword(e.target.value)}
              placeholder={t('businessPlaceholder', language)}
              className="flex-1 px-4 py-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-lg"
            />
          </div>
          <div className="flex flex-wrap gap-2">
            <span className="text-xs text-gray-500">{t('popularSearches', language)}</span>
            {popularKeywords.map(keyword => (
              <button
                key={keyword}
                onClick={() => setBusinessKeyword(keyword)}
                className="text-xs px-2 py-1 bg-blue-100 text-blue-700 rounded hover:bg-blue-200"
              >
                {keyword}
              </button>
            ))}
          </div>
        </div>

        {/* Location Filters */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              2. {t('stateRequired', language)} <span className="text-red-500">*</span>
            </label>
            <select
              value={selectedState}
              onChange={(e) => {
                setSelectedState(e.target.value);
                setSelectedCity(null);
              }}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="">{t('selectAState', language)}</option>
              {states.map(state => (
                <option key={state.code} value={state.code}>
                  {getStateName(state.code, language)}
                </option>
              ))}
            </select>
          </div>
          
          <CitySelector 
            selectedState={selectedState}
            onCitySelect={setSelectedCity}
            className=""
          />
        </div>

        {/* Advanced Filters Section - Open by default */}
        <details className="mb-6" open>
          <summary className="cursor-pointer text-sm font-medium text-gray-700 mb-3 hover:text-gray-900">
            {t('advancedFilters', language)}
          </summary>
          
          <div className="mt-4 space-y-4 p-4 bg-gray-50 rounded-lg">
            {/* Road Type Selection */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                {t('roadTypesPreselected', language)}
              </label>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                {Object.entries(roadCategories).map(([key, category]) => (
                  <div key={key} className="flex items-start space-x-2 p-2 rounded hover:bg-gray-100">
                    <input
                      type="checkbox"
                      id={`road-type-${key}`}
                      className="mt-1 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                      checked={category.types.every(type => selectedRoadTypes.has(type))}
                      onChange={() => toggleRoadType(category.types)}
                    />
                    <label htmlFor={`road-type-${key}`} className="flex-1 cursor-pointer">
                      <div className="font-medium text-sm">{category.label}</div>
                      <div className="text-xs text-gray-500">{category.description}</div>
                      <div className="text-xs mt-1">
                        <span className={`inline-flex items-center px-2 py-0.5 rounded text-xs font-medium ${
                          category.businessPotential === 'very-high' ? 'bg-green-100 text-green-800' :
                          category.businessPotential === 'high' ? 'bg-blue-100 text-blue-800' :
                          category.businessPotential === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                          category.businessPotential === 'low' ? 'bg-orange-100 text-orange-800' :
                          category.businessPotential === 'very-low' ? 'bg-red-100 text-red-800' :
                          'bg-gray-100 text-gray-800'
                        }`}>
                          {t(`${category.businessPotential.replace('-', '')}Potential`, language)}
                        </span>
                      </div>
                    </label>
                  </div>
                ))}
              </div>
            </div>

            {/* Road Name Filter */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                {t('searchByRoadName', language)}
              </label>
              <input
                type="text"
                value={roadNameFilter}
                onChange={(e) => setRoadNameFilter(e.target.value)}
                placeholder="e.g. Main Street, Broadway, Market Street..."
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
              <p className="mt-1 text-xs text-gray-500">
                {t('tipMainStreet', language)}
              </p>
            </div>

            {/* Additional Filters */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  {t('minimumRoadLength', language)}
                </label>
                <select
                  value={minRoadLength}
                  onChange={(e) => setMinRoadLength(Number(e.target.value))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value={0}>{t('anyLength', language)}</option>
                  <option value={1}>{t('atLeast1km', language)}</option>
                  <option value={2}>{t('atLeast2km', language)}</option>
                  <option value={5}>{t('atLeast5km', language)}</option>
                  <option value={10}>{t('atLeast10km', language)}</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  {t('businessDensityFilter', language)}
                </label>
                <select
                  value={businessDensity}
                  onChange={(e) => setBusinessDensity(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="all">{t('allRoads', language)}</option>
                  <option value="high">{t('highPotentialOnly', language)}</option>
                  <option value="medium">{t('mediumPotential', language)}</option>
                </select>
              </div>
            </div>
          </div>
        </details>

        {/* Action Buttons */}
        <div className="flex gap-4">
          <button
            onClick={handleSearch}
            disabled={!selectedState || !selectedCity || isLoading}
            className="flex-1 px-6 py-3 bg-blue-500 text-white rounded-md hover:bg-blue-600 disabled:bg-gray-400 font-medium flex items-center justify-center"
          >
            {isLoading ? (
              <>
                <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
                {t('loading', language).replace('...', '')}...
              </>
            ) : (
              t('searchRoads', language)
            )}
          </button>
          
          <label className="flex items-center px-4 py-2 border border-gray-300 rounded-md cursor-pointer hover:bg-gray-50">
            <input
              type="checkbox"
              checked={showOnlyUncrawled}
              onChange={(e) => setShowOnlyUncrawled(e.target.checked)}
              className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded mr-2"
            />
            <span className="text-sm">{t('showOnlyUncrawled', language)}</span>
          </label>
        </div>
        
        {message && (
          <div className={`mt-4 p-3 rounded ${message.includes('Error') ? 'bg-red-100 text-red-700' : 'bg-green-100 text-green-700'}`}>
            {message}
          </div>
        )}
      </div>

      {/* Results Section - Only show after user clicks Search */}
      {hasSearched && (selectedState || selectedCity) && (
        <div className="bg-white p-6 rounded-lg shadow">
          <div className="flex justify-between items-center mb-4">
            <h3 className="text-lg font-semibold">
              {isLoading ? t('loading', language) : (
                <>
                  {filteredAndSortedRoads.length} {t('roadsFound', language)}
                  {selectedCity ? ` ${t('in', language)} ${selectedCity.city_name}, ${selectedCity.state_code}` :
                   selectedState ? ` ${t('in', language)} ${getStateName(selectedState, language)}` : ''}
                  {isBulkMode && selectedRoads.size > 0 && (
                    <span className="ml-2 text-blue-600">
                      ({selectedRoads.size} {language === 'vi' ? 'đã chọn' : 'selected'})
                    </span>
                  )}
                </>
              )}
            </h3>
            {!isLoading && filteredAndSortedRoads.length > 0 && (
              <div className="flex items-center space-x-4">
                {/* Bulk mode toggle */}
                <div className="flex items-center">
                  <label className="relative inline-flex items-center cursor-pointer">
                    <input
                      type="checkbox"
                      checked={isBulkMode}
                      onChange={(e) => {
                        setIsBulkMode(e.target.checked);
                        if (!e.target.checked) {
                          setSelectedRoads(new Set());
                        }
                      }}
                      className="sr-only peer"
                    />
                    <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
                    <span className="ml-3 text-sm font-medium text-gray-900">
                      {language === 'vi' ? 'Chọn nhiều' : 'Bulk mode'}
                    </span>
                  </label>
                </div>
                
                {/* Sort dropdown */}
                <label className="text-sm text-gray-500">{t('sortBy', language)}:</label>
                <select
                  value={sortBy}
                  onChange={(e) => setSortBy(e.target.value)}
                  className="text-sm px-2 py-1 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="poi">POI Count</option>
                  <option value="potential">{t('businessPotentialSort', language)}</option>
                  <option value="name">{t('roadName', language)}</option>
                  <option value="length">{t('roadLength', language)}</option>
                  <option value="type">{t('roadType', language)}</option>
                </select>
              </div>
            )}
          </div>
          
          {/* Bulk actions bar */}
          {isBulkMode && selectedRoads.size > 0 && (
            <div className="mb-4 p-3 bg-blue-50 rounded-lg">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-4">
                  <span className="text-sm text-blue-700">
                    {selectedRoads.size} {language === 'vi' ? 'đường đã chọn' : 'roads selected'}
                  </span>
                <button
                  onClick={() => {
                    // Select all visible roads
                    const allRoadIds = new Set(paginatedRoads.map(r => r.osm_id));
                    setSelectedRoads(allRoadIds);
                  }}
                  className="text-sm text-blue-600 hover:text-blue-800"
                >
                  {language === 'vi' ? 'Chọn tất cả trang này' : 'Select all on page'}
                </button>
                <button
                  onClick={() => setSelectedRoads(new Set())}
                  className="text-sm text-blue-600 hover:text-blue-800"
                >
                  {language === 'vi' ? 'Bỏ chọn tất cả' : 'Clear selection'}
                </button>
              </div>
              <button
                onClick={handleBulkCrawl}
                disabled={bulkCrawlProgress !== null}
                className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-gray-400 flex items-center"
              >
                {bulkCrawlProgress ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                    <div className="text-left">
                      <div>{language === 'vi' ? `Đang crawl ${bulkCrawlProgress.current}/${bulkCrawlProgress.total}` : `Crawling ${bulkCrawlProgress.current}/${bulkCrawlProgress.total}`}</div>
                      {bulkCrawlProgress.waitingTime && (
                        <div className="text-xs">{language === 'vi' ? `Chờ ${bulkCrawlProgress.waitingTime}s...` : `Wait ${bulkCrawlProgress.waitingTime}s...`}</div>
                      )}
                      {bulkCrawlProgress.estimatedTimeRemaining && !bulkCrawlProgress.waitingTime && (
                        <div className="text-xs">
                          {language === 'vi' ? `Còn ~${Math.ceil(bulkCrawlProgress.estimatedTimeRemaining / 60000)} phút` : `~${Math.ceil(bulkCrawlProgress.estimatedTimeRemaining / 60000)} min remaining`}
                        </div>
                      )}
                    </div>
                  </>
                ) : (
                  <>
                    <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                    </svg>
                    {language === 'vi' ? 'Crawl tất cả' : 'Crawl all selected'}
                  </>
                )}
              </button>
              {bulkCrawlProgress && bulkCrawlProgress.currentRoad && (
                <div className="mt-2 text-sm text-blue-600">
                  {language === 'vi' ? `Đang crawl: ${bulkCrawlProgress.currentRoad}` : `Currently crawling: ${bulkCrawlProgress.currentRoad}`}
                </div>
              )}
            </div>
          )}
          
          {!isLoading && filteredAndSortedRoads.length > 0 ? (
            <>
              <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className="bg-gray-50">
                    <tr>
                      {isBulkMode && (
                        <th className="px-3 py-3 text-left">
                          <input
                            type="checkbox"
                            checked={paginatedRoads.length > 0 && paginatedRoads.every(road => selectedRoads.has(road.osm_id))}
                            onChange={(e) => {
                              if (e.target.checked) {
                                const newSelection = new Set(selectedRoads);
                                paginatedRoads.forEach(road => newSelection.add(road.osm_id));
                                setSelectedRoads(newSelection);
                              } else {
                                const newSelection = new Set(selectedRoads);
                                paginatedRoads.forEach(road => newSelection.delete(road.osm_id));
                                setSelectedRoads(newSelection);
                              }
                            }}
                            className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                          />
                        </th>
                      )}
                      <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">{t('tableRoadName', language)}</th>
                      <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">{t('tableLocation', language)}</th>
                      <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">{t('tableType', language)}</th>
                      <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase">POI</th>
                      <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">{t('tableBusinessPotential', language)}</th>
                      <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">{t('tableLength', language)}</th>
                      <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase">{t('tableStatus', language)}</th>
                      <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase">{t('tableAction', language)}</th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {paginatedRoads.map((road) => {
                      // Check crawl status from database first
                      const dbCrawlInfo = road.last_crawl_info;
                      const hasBeenCrawled = dbCrawlInfo && dbCrawlInfo.total_crawls > 0;
                      const keywordsCrawled = dbCrawlInfo?.keywords_crawled || [];
                      const currentKeyword = businessKeyword || 'all';
                      const keywordAlreadyCrawled = keywordsCrawled.includes(currentKeyword);
                      
                      // Then check current session status
                      const status = crawlStatus[road.osm_id]?.[currentKeyword];
                      const isCrawling = crawlingRoads.has(road.osm_id);
                      const potential = getBusinessPotential(road);
                      
                      return (
                        <tr key={road.osm_id} className="hover:bg-gray-50">
                          {isBulkMode && (
                            <td className="px-3 py-3">
                              <input
                                type="checkbox"
                                checked={selectedRoads.has(road.osm_id)}
                                onChange={(e) => {
                                  const newSelection = new Set(selectedRoads);
                                  if (e.target.checked) {
                                    newSelection.add(road.osm_id);
                                  } else {
                                    newSelection.delete(road.osm_id);
                                  }
                                  setSelectedRoads(newSelection);
                                }}
                                className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                              />
                            </td>
                          )}
                          <td className="px-4 py-3">
                            <div className="text-sm font-medium text-gray-900">
                              {road.name || t('unnamedRoad', language)}
                            </div>
                            {road.ref && (
                              <div className="text-xs text-gray-500">{t('route', language)}: {road.ref}</div>
                            )}
                          </td>
                          <td className="px-4 py-3 text-sm text-gray-500">
                            {road.city_name || selectedCity?.city_name || 'N/A'}, {road.state_code || selectedState}
                          </td>
                          <td className="px-4 py-3 text-sm">
                            <span className={`inline-flex items-center px-2 py-1 rounded text-xs font-medium ${
                              ['primary', 'secondary'].includes(road.highway) ? 'bg-blue-100 text-blue-800' :
                              ['residential', 'tertiary'].includes(road.highway) ? 'bg-green-100 text-green-800' :
                              ['motorway', 'trunk'].includes(road.highway) ? 'bg-purple-100 text-purple-800' :
                              'bg-gray-100 text-gray-800'
                            }`}>
                              {getRoadTypeLabel(road.highway, language)}
                            </span>
                          </td>
                          <td className="px-4 py-3 text-center text-sm font-medium">
                            {road.poi_count || 0}
                          </td>
                          <td className="px-4 py-3 text-sm">
                            <div className="flex items-center">
                              <div className="flex space-x-1">
                                {[...Array(5)].map((_, i) => (
                                  <div
                                    key={i}
                                    className={`h-2 w-2 rounded-full ${
                                      i < potential ? 'bg-green-500' : 'bg-gray-300'
                                    }`}
                                  />
                                ))}
                              </div>
                              <span className="ml-2 text-xs text-gray-500">
                                {potential >= 5 ? t('veryHigh', language) :
                                 potential >= 4 ? t('high', language) :
                                 potential >= 2 ? t('medium', language) : 
                                 potential >= 1 ? t('low', language) : t('veryLow', language)}
                              </span>
                            </div>
                          </td>
                          <td className="px-4 py-3 text-sm text-gray-500">
                            {road.segment_count || road.total_segments || 1} segments
                          </td>
                          <td className="px-4 py-3 text-center">
                            <div className="space-y-1">
                              <span className={`inline-flex items-center px-2 py-1 rounded text-xs font-medium ${
                                isCrawling ? 'bg-yellow-100 text-yellow-800' :
                                status === 'completed' || keywordAlreadyCrawled ? 'bg-green-100 text-green-800' :
                                status === 'failed' ? 'bg-red-100 text-red-800' :
                                status === 'processing' ? 'bg-blue-100 text-blue-800' :
                                'bg-gray-100 text-gray-800'
                              }`}>
                                {isCrawling ? t('starting', language) :
                                 status === 'completed' || keywordAlreadyCrawled ? '✓ Đã crawl' :
                                 status === 'processing' ? t('processing', language) :
                                 status === 'failed' ? t('failed', language) :
                                 'Chưa crawl'}
                              </span>
                              {dbCrawlInfo && dbCrawlInfo.total_crawls > 0 && (
                                <div className="text-xs text-gray-500">
                                  {dbCrawlInfo.total_crawls} lần • {dbCrawlInfo.total_businesses} businesses
                                </div>
                              )}
                            </div>
                          </td>
                          <td className="px-4 py-3 text-center">
                            <div className="flex items-center justify-center space-x-2">
                              {!isBulkMode && (() => {
                                const crawlKey = `${road.osm_id}_${businessKeyword || 'all'}`;
                                const session = crawlingSessions[crawlKey];
                                
                                if (session) {
                                  if (session.status === 'crawling') {
                                    return (
                                      <div className="flex items-center text-yellow-600">
                                        <svg className="animate-spin h-4 w-4 mr-2" viewBox="0 0 24 24">
                                          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" fill="none" />
                                          <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" />
                                        </svg>
                                        {language === 'vi' ? 'Đang crawl...' : 'Crawling...'}
                                      </div>
                                    );
                                  } else if (session.status === 'completed') {
                                    return (
                                      <button
                                        onClick={() => handleViewResults(session.sessionId)}
                                        className="text-green-600 hover:text-green-800 flex items-center"
                                      >
                                        <svg className="h-4 w-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                                        </svg>
                                        {language === 'vi' ? `Xem (${session.businessesFound})` : `View (${session.businessesFound})`}
                                      </button>
                                    );
                                  } else if (session.status === 'failed') {
                                    return (
                                      <span className="text-red-600 text-sm">
                                        {language === 'vi' ? 'Thất bại' : 'Failed'}
                                      </span>
                                    );
                                  }
                                }
                                
                                // Default: show crawl button or re-crawl if already crawled
                                if (!status || status === 'failed') {
                                  return (
                                    <button
                                      onClick={() => handleCrawlSingleRoad(road)}
                                      className={`px-3 py-1 text-white text-sm rounded transition-colors ${
                                        keywordAlreadyCrawled 
                                          ? 'bg-orange-500 hover:bg-orange-600' 
                                          : 'bg-blue-500 hover:bg-blue-600'
                                      }`}
                                    >
                                      {keywordAlreadyCrawled ? 'Re-crawl' : 'Crawl'}
                                    </button>
                                  );
                                } else if (status === 'completed') {
                                  return <span className="text-sm text-green-600">✓</span>;
                                } else {
                                  return null;
                                }
                              })()}
                            </div>
                          </td>
                        </tr>
                      );
                    })}
                  </tbody>
                </table>
              </div>

              {/* Pagination */}
              {totalPages > 1 && (
                <div className="mt-4 flex items-center justify-between">
                  <div className="text-sm text-gray-700">
                    {t('showingPagination', language, {
                      start: (currentPage - 1) * roadsPerPage + 1,
                      end: Math.min(currentPage * roadsPerPage, filteredAndSortedRoads.length),
                      total: filteredAndSortedRoads.length
                    })}
                  </div>
                  <div className="flex space-x-2">
                    <button
                      onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
                      disabled={currentPage === 1}
                      className="px-3 py-1 border border-gray-300 rounded-md text-sm font-medium disabled:bg-gray-100 disabled:text-gray-400 hover:bg-gray-50"
                    >
                      {t('previous', language)}
                    </button>
                    <span className="px-3 py-1 text-sm">
                      {t('page', language)} {currentPage} {t('of', language)} {totalPages}
                    </span>
                    <button
                      onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
                      disabled={currentPage === totalPages}
                      className="px-3 py-1 border border-gray-300 rounded-md text-sm font-medium disabled:bg-gray-100 disabled:text-gray-400 hover:bg-gray-50"
                    >
                      {t('next', language)}
                    </button>
                  </div>
                </div>
              )}

              {/* Summary Statistics */}
              <div className="mt-4 pt-4 border-t border-gray-200">
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                  <div>
                    <span className="text-gray-500">{t('totalRoads', language)}:</span>
                    <span className="ml-2 font-semibold">{filteredAndSortedRoads.length}</span>
                  </div>
                  <div>
                    <span className="text-gray-500">{t('completed', language)}:</span>
                    <span className="ml-2 font-semibold text-green-600">
                      {Object.values(crawlStatus).filter(s => s[businessKeyword] === 'completed').length}
                    </span>
                  </div>
                  <div>
                    <span className="text-gray-500">{t('inProgress', language)}:</span>
                    <span className="ml-2 font-semibold text-blue-600">
                      {Object.values(crawlStatus).filter(s => s[businessKeyword] === 'processing').length + crawlingRoads.size}
                    </span>
                  </div>
                  <div>
                    <span className="text-gray-500">{t('notCrawled', language)}:</span>
                    <span className="ml-2 font-semibold text-gray-600">
                      {filteredAndSortedRoads.length - Object.values(crawlStatus).filter(s => s[businessKeyword]).length}
                    </span>
                  </div>
                </div>
              </div>
            </>
          ) : (
            !isLoading && (
              <div className="text-center py-12 text-gray-500">
                <p className="text-lg mb-2">{t('noRoadsFound', language)}</p>
                <p className="text-sm">{t('tryAdjustingFilters', language)}</p>
              </div>
            )
          )}
        </div>
      )}

      {/* Business Potential Analysis Modal/Card */}
      {selectedRoadForAnalysis && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div className="bg-white rounded-lg shadow-xl">
              <div className="flex justify-between items-center p-4 border-b">
                <h3 className="text-lg font-semibold">{selectedRoadForAnalysis.name}</h3>
                <button
                  onClick={() => setSelectedRoadForAnalysis(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  ✕
                </button>
              </div>
              <div className="p-4">
                <BusinessPotentialCard
                  lat={selectedRoadForAnalysis.lat}
                  lon={selectedRoadForAnalysis.lon}
                  roadName={selectedRoadForAnalysis.name}
                />
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Tips Section */}
      <div className="bg-gray-50 p-6 rounded-lg">
        <h3 className="text-lg font-semibold mb-3">{t('proTips', language)}</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-gray-600">
          <div>
            <h4 className="font-medium text-gray-700 mb-1">🎯 {t('bestRoadTypesForBusiness', language)}</h4>
            <ul className="list-disc list-inside space-y-1">
              {t('proTipsContent.bestRoadTypes', language).map((tip, index) => (
                <li key={index}>{tip}</li>
              ))}
            </ul>
          </div>
          <div>
            <h4 className="font-medium text-gray-700 mb-1">📍 {t('highDensityBusinessAreas', language)}</h4>
            <ul className="list-disc list-inside space-y-1">
              {t('proTipsContent.highDensityAreas', language).map((area, index) => (
                <li key={index}>{area}</li>
              ))}
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CrawlControl;